C:\Users\GoodLuck>python
Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:19:22) [MSC v.1500 32 bit (
Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> L=[123,'hello',1.23]
>>> len(L)
3
>>> L[1]
'hello'
>>> L[:1]
[123]
>>> L[:-1]
[123, 'hello']
>>> L+[4,5,6]
[123, 'hello', 1.23, 4, 5, 6]
>>> L
[123, 'hello', 1.23]
>>> L.append('NI')
>>> L
[123, 'hello', 1.23, 'NI']
>>> L.pop(2)
1.23
>>> L
[123, 'hello', 'NI']
>>> L.pop()
'Ni'
>>>
这里pop()是指定位置剔除元素，默认从最后一位开始剔除；remove()是指定元素值从第一个匹配的开始剔除。
>>> L.append('golf','tree')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: append() takes exactly one argument (2 given)
append()每次只能添加一个元素

>>> L.append('tree')
>>> L
[123, 'test', 'tree']

>>> L+['hh','kk']
[123, 'test', 'tree', 'hh', 'kk']
使用+可以一次添加多个元素到原list尾部

>>> L.remove()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: remove() takes exactly one argument (0 given)
remove()函数必须指定要remove的元素,1个，和append是对应

>>> L
[123, 'test', 'tree']
>>> L+[1111,'bbbb']
[123, 'test', 'tree', 1111, 'bbbb']
>>> L
[123, 'test', 'tree']
list相+只是临时的，再次输出就没有了，并没有改变原list

>>> L.append('vvvv')
>>> L
[123, 'test', 'tree', 'vvvv']
append()是永久的，默认追加到list最后

>>> L.insert('hhhh')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: insert() takes exactly 2 arguments (1 given)
>>> L.insert('hhhh',1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: an integer is required
>>> L.insert(1,'hhhh')
>>> L
[123, 'hhhh', 'test', 'tree', 'vvvv']
insert()可以插入到列表任意位置，每次只能是一个元素


>>> M=['bb','aa','cc']
>>> M.sort()
>>> M
['aa', 'bb', 'cc']
>>> M.reverse()
>>> M
['cc', 'bb', 'aa']
>>> M.remove('bb')
>>> M
['cc', 'aa']
>>>
这里对列表的sort()和reverse()操作都是不可逆的

>>> L=[123,'test','Ni']
>>> L[99]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
过界


list嵌套
>>> M=[[1,2,3],
...    [4,5,6],
...    [7,8,9]]
>>> M
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> M[1]
[4, 5, 6]
>>> M[1][2]
6

M[1][2] 相当于第2个元素里面的第三个子元素
>>>

字典dic
字典不是序列，而是mapping

>>> M=[[1,2,3],
...   [4,5,6],
...   [7,8,9]]
>>> [row[1] +1 for row in M]
[3, 6, 9]

>>> D={'food':'spam','quantity':4,'color':'pink'}
>>> D
{'food': 'spam', 'color': 'pink', 'quantity': 4}
>>> D['food']
'spam'
>>> D['quantity'] +=1
>>> D
{'food': 'spam', 'color': 'pink', 'quantity': 5}

>>> T={}
>>> T['name']='richard'
>>> T['age']=22
>>> T['job']='IT'
>>> T
{'job': 'IT', 'age': 22, 'name': 'richard'}
由一个空白字典创建字典

>>> rec={'name':{'fist':'Bob','last':'Smith'},'job':['dev','mgr'],'age':40.5}
>>> rec['name']
{'last': 'Smith', 'fist': 'Bob'}
>>> rec['name']['last']
'Smith'
字典可以嵌套

>>> rec['job'].append('janitor')
>>> rec
{'age': 40.5, 'job': ['dev', 'mgr', 'janitor'], 'name': {'last': 'Smith', 'fist'
: 'Bob'}}
>>>
字典可以追加元素

>>> Ks=list(D.keys())
>>> Ks
['food', 'color', 'quantity']

>>> for key in Ks:
...     print key,'=>',D[key]
...
food => spam
color => pink
quantity => 5

元组  不可改变

>>> T=(1,2,3,4,5,6)
>>> T + (5,6,7,8)
(1, 2, 3, 4, 5, 6, 5, 6, 7, 8)
>>> T
(1, 2, 3, 4, 5, 6)
>>> T.index(4)
3
>>> T.count(4)
1
>>> T.count(5)
1

>>> T[0]=9
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
元组数据不能改变

>>> T=('spam',3.0,[11,12,13])
>>> T[2][1]
12
元组支持嵌套

>>> T.append(7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
元组不能追加元素

>>> f=open('data.txt','w')
>>> f.write('hello\n')
>>> f.write('python\n')
>>> f.close()

>>> p=open('data.txt','r')
>>> print p.read()
hello
python

>>> import math
>>> math.pi ,math.e
(3.141592653589793, 2.718281828459045)
>>> import random
>>> random.randint(1,10)
2
>>> random.randint(1,10)
10
>>> random.choice(['a','b','c','d','e'])
'a'
>>> random.choice(['a','b','c','d','e'])
'c'

百分比相加
>>> from fractions import Fraction
>>> from fractions import fraction
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: cannot import name fraction
>>> x=Fraction(1,3)
>>> y=Fraction(2,3)
>>> x+y
Fraction(1, 1)
>>> print x+y
1
>>> z=Fraction(4,6)
>>> x+z
Fraction(1, 1)
>>> print x+z
1

引入小数点精度
>>> import decimal
>>> decimal.Decimal(1)/decimal.Decimal(3)
Decimal('0.3333333333333333333333333333')
>>>

集合  可以把重复的过滤掉
>>> x=set('fasfaafa')
>>> x
set(['a', 's', 'f'])
>>> y=set('csdegrsazdgewherhtymuiop')
>>> y
set(['a', 'c', 'e', 'd', 'g', 'i', 'h', 'm', 'o', 'p', 's', 'r', 'u', 't', 'w',
'y', 'z'])
>>> x-y
set(['f'])
>>> x|y
set(['a', 'c', 'e', 'd', 'g', 'f', 'i', 'h', 'm', 'o', 'p', 's', 'r', 'u', 't',
'w', 'y', 'z'])
>>> x&y
set(['a', 's'])
>>> x^y
set(['c', 'e', 'd', 'g', 'f', 'i', 'h', 'm', 'o', 'p', 'r', 'u', 't', 'w', 'y',
'z'])